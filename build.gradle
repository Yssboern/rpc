plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.example'
version = '0.1'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    runtimeOnly 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
    implementation 'com.google.protobuf:protobuf-java:3.24.4'

    implementation 'io.grpc:grpc-all:1.59.0'

    implementation 'net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE'
    implementation 'com.google.api.grpc:proto-google-common-protos:2.27.0'

    implementation group: 'org.apache.tomcat', name: 'tomcat-annotations-api', version: '11.0.0-M13'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

task jsClient(type: Exec) {
    group = 'gRCP clients'
    description = 'starts js gRCP client and sends request to server'

    workingDir "src/main/javascript"

    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        commandLine "cmd", "/c", "npm install && npm start"
    } else {
        commandLine "sh", "-c", "npm install && npm start"
    }
}
task pyClient {
    group = 'gRCP clients'
    description = 'Generates gRPC Python code from .proto file and runs the ping_client.py script'

    doLast {
        exec {
            workingDir "src/main/python"
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine "cmd", "/c", "python -m grpc_tools.protoc -I../proto --python_out=. --grpc_python_out=. ../proto/ping.proto"
            } else {
                commandLine "sh", "-c", "python -m grpc_tools.protoc -I../proto --python_out=. --grpc_python_out=. ../proto/ping.proto"
            }
        }
        exec {
            workingDir "src/main/python"
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine "cmd", "/c", "python ping_client.py"
            } else {
                commandLine "sh", "-c", "python ping_client.py"
            }
        }
    }
}

task javaClient(type: Exec) {
    group = 'gRCP clients'
    description = 'Sends a curl GET request to http://localhost:8080/api/ping'
    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        commandLine "cmd", "/c", "curl http://localhost:8080/api/ping"
    } else {
        commandLine "sh", "-c", "curl http://localhost:8080/api/ping"
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.4'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.58.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

